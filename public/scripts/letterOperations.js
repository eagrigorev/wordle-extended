import { ROWS } from './const.js';
import { flipColorsAnimation } from './flipColorsAnimation.js';
import { displayMessage } from './displayMessage.js';
import { wordle } from './getWordle.js';
export let row = 0;
let tile = 0;
export let gameOver = false;
export const addLetter = (key) => {
    if (row < 7 && tile < 6) {
        const currentTile = document.getElementById(`row-${row}-tile-${tile}`);
        if (currentTile != null) {
            currentTile.textContent = key;
            currentTile.setAttribute('data', key);
            ROWS[row][tile] = key;
            tile++;
        }
    }
};
export const deleteLetter = () => {
    if (tile > 0) {
        tile--;
        const currentTile = document.getElementById(`row-${row}-tile-${tile}`);
        if (currentTile != null) {
            currentTile.textContent = '';
            currentTile.setAttribute('data', '');
            ROWS[row][tile] = '';
        }
    }
};
export const checkWordle = () => {
    if (tile > 5) {
        const userWordle = ROWS[row].join('');
        fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${userWordle}`)
            .then((response) => {
            if (response.status == 404) {
                displayMessage('Word not found');
                return;
            }
            else {
                flipColorsAnimation();
                if (userWordle === wordle) {
                    displayMessage('Correct!');
                    gameOver = true;
                    return;
                }
                else {
                    if (row >= 6) {
                        displayMessage('Game Over');
                        gameOver = true;
                        return;
                    }
                    if (row < 6) {
                        row++;
                        tile = 0;
                    }
                }
            }
        })
            .catch((error) => {
            console.error(error);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGV0dGVyT3BlcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sZXR0ZXJPcGVyYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QyxNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNiLE1BQU0sQ0FBQyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7QUFFNUIsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBVyxFQUFRLEVBQUU7SUFDN0MsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDdkIsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksV0FBVyxJQUFJLElBQUksRUFBRTtZQUN2QixXQUFXLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztZQUM5QixXQUFXLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ3RCLElBQUksRUFBRSxDQUFDO1NBQ1I7S0FDRjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFTLEVBQUU7SUFDckMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1FBQ1osSUFBSSxFQUFFLENBQUM7UUFDUCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sR0FBRyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkUsSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFO1lBQ3ZCLFdBQVcsQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1lBQzdCLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDdEI7S0FDRjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFTLEVBQUU7SUFDcEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1FBQ1osTUFBTSxVQUFVLEdBQVcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxLQUFLLENBQUMsbURBQW1ELFVBQVUsRUFBRSxDQUFDO2FBQ25FLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2pCLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLEVBQUU7Z0JBQzFCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUNqQyxPQUFPO2FBQ1I7aUJBQU07Z0JBQ0wsbUJBQW1CLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxVQUFVLEtBQUssTUFBTSxFQUFFO29CQUN6QixjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzNCLFFBQVEsR0FBRyxJQUFJLENBQUM7b0JBQ2hCLE9BQU87aUJBQ1I7cUJBQU07b0JBQ0wsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO3dCQUNaLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFDNUIsUUFBUSxHQUFHLElBQUksQ0FBQzt3QkFDaEIsT0FBTztxQkFDUjtvQkFDRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7d0JBQ1gsR0FBRyxFQUFFLENBQUM7d0JBQ04sSUFBSSxHQUFHLENBQUMsQ0FBQztxQkFDVjtpQkFDRjthQUNGO1FBQ0gsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0tBQ047QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBST1dTIH0gZnJvbSAnLi9jb25zdC5qcyc7XHJcbmltcG9ydCB7IGZsaXBDb2xvcnNBbmltYXRpb24gfSBmcm9tICcuL2ZsaXBDb2xvcnNBbmltYXRpb24uanMnO1xyXG5pbXBvcnQgeyBkaXNwbGF5TWVzc2FnZSB9IGZyb20gJy4vZGlzcGxheU1lc3NhZ2UuanMnO1xyXG5pbXBvcnQgeyB3b3JkbGUgfSBmcm9tICcuL2dldFdvcmRsZS5qcyc7XHJcblxyXG5leHBvcnQgbGV0IHJvdyA9IDA7XHJcbmxldCB0aWxlID0gMDtcclxuZXhwb3J0IGxldCBnYW1lT3ZlciA9IGZhbHNlO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZExldHRlciA9IChrZXk6IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gIGlmIChyb3cgPCA3ICYmIHRpbGUgPCA2KSB7XHJcbiAgICBjb25zdCBjdXJyZW50VGlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByb3ctJHtyb3d9LXRpbGUtJHt0aWxlfWApO1xyXG4gICAgaWYgKGN1cnJlbnRUaWxlICE9IG51bGwpIHtcclxuICAgICAgY3VycmVudFRpbGUudGV4dENvbnRlbnQgPSBrZXk7XHJcbiAgICAgIGN1cnJlbnRUaWxlLnNldEF0dHJpYnV0ZSgnZGF0YScsIGtleSk7XHJcbiAgICAgIFJPV1Nbcm93XVt0aWxlXSA9IGtleTtcclxuICAgICAgdGlsZSsrO1xyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVMZXR0ZXIgPSAoKTogdm9pZCA9PiB7XHJcbiAgaWYgKHRpbGUgPiAwKSB7XHJcbiAgICB0aWxlLS07XHJcbiAgICBjb25zdCBjdXJyZW50VGlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGByb3ctJHtyb3d9LXRpbGUtJHt0aWxlfWApO1xyXG4gICAgaWYgKGN1cnJlbnRUaWxlICE9IG51bGwpIHtcclxuICAgICAgY3VycmVudFRpbGUudGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgY3VycmVudFRpbGUuc2V0QXR0cmlidXRlKCdkYXRhJywgJycpO1xyXG4gICAgICBST1dTW3Jvd11bdGlsZV0gPSAnJztcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2hlY2tXb3JkbGUgPSAoKTogdm9pZCA9PiB7XHJcbiAgaWYgKHRpbGUgPiA1KSB7XHJcbiAgICBjb25zdCB1c2VyV29yZGxlOiBzdHJpbmcgPSBST1dTW3Jvd10uam9pbignJyk7XHJcbiAgICBmZXRjaChgaHR0cHM6Ly9hcGkuZGljdGlvbmFyeWFwaS5kZXYvYXBpL3YyL2VudHJpZXMvZW4vJHt1c2VyV29yZGxlfWApXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gNDA0KSB7XHJcbiAgICAgICAgICBkaXNwbGF5TWVzc2FnZSgnV29yZCBub3QgZm91bmQnKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZmxpcENvbG9yc0FuaW1hdGlvbigpO1xyXG4gICAgICAgICAgaWYgKHVzZXJXb3JkbGUgPT09IHdvcmRsZSkge1xyXG4gICAgICAgICAgICBkaXNwbGF5TWVzc2FnZSgnQ29ycmVjdCEnKTtcclxuICAgICAgICAgICAgZ2FtZU92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocm93ID49IDYpIHtcclxuICAgICAgICAgICAgICBkaXNwbGF5TWVzc2FnZSgnR2FtZSBPdmVyJyk7XHJcbiAgICAgICAgICAgICAgZ2FtZU92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocm93IDwgNikge1xyXG4gICAgICAgICAgICAgIHJvdysrO1xyXG4gICAgICAgICAgICAgIHRpbGUgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxufTsiXX0=